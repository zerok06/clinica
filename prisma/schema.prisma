// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./sqlite/clinica.db"
}

model usuario {
  id             String       @id @default(uuid())
  nombres        String
  apellidos      String
  email          String
  dni            String
  telefono       String
  role           String       @default("administrador")
  createAt       DateTime     @default(now())
  updateAt       DateTime     @updatedAt
  credenciales   credenciales @relation(fields: [credencialesId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  credencialesId String       @unique
}

model credenciales {
  id       String   @id @default(uuid())
  username String   @unique
  password String
  usuario  usuario?
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model paciente {
  id            String          @id @default(uuid())
  nombres       String
  apellidos     String
  direccion     String
  nacimiento    DateTime
  edad          Int
  dni           String
  celular       String
  convenio      String
  file          file[]
  procedimiento procedimiento[]
  cita          cita[]
  createAt      DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  odontograma   odontograma[]
}

model tratamiento {
  id                            String                          @id @default(uuid())
  nombre                        String
  descripcion                   String
  monto                         Float
  categoriaTratamiento          categoriaTratamiento?           @relation(fields: [categoriaTratamientoId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  categoriaTratamientoId        String?
  detalleDiagnosticoTratamiento detalleDiagnosticoTratamiento[]
  createAt                      DateTime                        @default(now())
  updateAt                      DateTime                        @updatedAt
}

model categoriaTratamiento {
  id          String        @id @default(uuid())
  nombre      String
  descripcion String
  tratamiento tratamiento[]
  createAt    DateTime      @default(now())
  updateAt    DateTime      @updatedAt
}

model diagnostico {
  id                            String                          @id @default(uuid())
  nombre                        String
  descripcion                   String
  detalleDiagnosticoTratamiento detalleDiagnosticoTratamiento[]
  createAt                      DateTime                        @default(now())
  updateAt                      DateTime                        @updatedAt
}

model detalleDiagnosticoTratamiento {
  id            String      @id @default(uuid())
  diagnostico   diagnostico @relation(fields: [diagnosticoId], references: [id])
  diagnosticoId String
  tratamiento   tratamiento @relation(fields: [tratamientoId], references: [id])
  tratamientoId String
  createAt      DateTime    @default(now())
  updateAt      DateTime    @updatedAt
}

model cita {
  id              String         @id @default(uuid())
  title           String
  description     String
  estado          String         @default("Pendiente")
  start           DateTime
  end             DateTime
  createAt        DateTime       @default(now())
  updateAt        DateTime       @updatedAt
  doctor          doctor         @relation(fields: [doctorId], references: [id])
  procedimiento   procedimiento? @relation(fields: [procedimientoId], references: [id])
  procedimientoId String?
  paciente        paciente?      @relation(fields: [pacienteId], references: [id])
  pacienteId      String?
  doctorId        String
}

model file {
  id         String   @id @default(uuid())
  name       String
  type       String
  path       String
  size       String
  category   String   @default("Otros")
  createAt   DateTime @default(now())
  paciente   paciente @relation(fields: [pacienteId], references: [id])
  pacienteId String
  updateAt   DateTime @updatedAt
}

model procedimiento {
  id          String   @id @default(uuid())
  start       DateTime
  end         DateTime
  monto_total Float
  recaudado   Float    @default(0.00)
  estado      String   @default("pendiente")
  title       String
  desc        String
  paciente    paciente @relation(fields: [pacienteId], references: [id])
  pacienteId  String
  pagos       pagos[]
  cita        cita[]
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
}

model pagos {
  id              String        @id @default(uuid())
  title           String
  fecha           DateTime      @default(now())
  desc            String
  monto           Float
  procedimiento   procedimiento @relation(fields: [procedimientoId], references: [id])
  procedimientoId String
  createAt        DateTime      @default(now())
  updateAt        DateTime      @updatedAt
}

model insumo {
  id          String   @id @default(uuid())
  nombre      String
  cantidad    Int
  description String
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
}

model odontograma {
  id         String    @id @default(uuid())
  paciente   paciente? @relation(fields: [pacienteId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  createAt   DateTime  @default(now())
  updateAt   DateTime  @updatedAt
  pacienteId String?
  diente     diente[]
}

model diente {
  id                    String                  @id @default(uuid())
  name                  String
  code                  Int
  tipo                  String
  odontograma           odontograma             @relation(fields: [odontogramaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createAt              DateTime                @default(now())
  updateAt              DateTime                @updatedAt
  odontogramaId         String
  diagnosticoMonoDiente diagnosticoMonoDiente[]
}

model diagnosticoMonoDiente {
  id          String   @id @default(uuid())
  base64      String
  desc        String
  name        String
  nomeclatura String   @default("N/A")
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  diente      diente   @relation(fields: [dienteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dienteId    String
}

model PlantillaMensaje {
  id       String   @id @default(uuid())
  asunto   String
  mensaje  String
  type     String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model doctor {
  id        String   @id @default(uuid())
  nombres   String
  apellidos String
  email     String
  dni       String
  code      String
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  cita      cita[]
}
